{"version":3,"sources":["logo.svg","services/PicService.js","components/pics/pics.jsx","services/AnalyticsService.js","components/socials/socials.jsx","components/intro/intro.jsx","components/about/about.jsx","services/AddPics.js","pages/AdminPics/AdminPics.jsx","services/UsersService.js","pages/Predictions/Predictions.jsx","App.js","reportWebVitals.js","index.js"],"names":["getPicSet","fetch","method","then","res","json","picsData","Pics","useState","pics","setPics","analyticsIntToggle","setAnalyticsIntToggle","useEffect","PicService","console","log","dat","analyticsInterval","setInterval","clearInterval","className","onScroll","e","picsInScroll","target","childNodes","windowWidth","Math","max","document","documentElement","clientWidth","window","innerWidth","pic","fromLeft","getBoundingClientRect","left","picWidth","width","map","picData","src","id","alt","Socials","Intro","About","BASE_URL","AdminPics","addPics","setAddPics","addPicsNames","setAddPicsNames","addPicsUrls","setAddPicsUrls","picsForm","setPicsForm","descriptions","tagslists","picsDBInfo","setPicsDBInfo","oldPics","setOldPics","a","arrayAddPics","name","picsDBInfoClone","descriptionsPicNames","Object","keys","length","picName","indexOf","FormData","i","append","getAll","picUrls","URL","createObjectURL","handleSubmit","jsonDB","JSON","stringify","blob","Blob","type","axios","post","data","handleRemovePic","idx","dataset","addPicsCopy","splice","newFileList","DataTransfer","items","add","files","handleDescriptionChange","value","handleRemovePicClick","AddPicsService","handleTagChange","idxsArrInt","idxs","split","parseInt","tagIndex","handleTagIntensityChange","handleRemoveTagClick","handleAddTagClick","push","onChange","newDataTransfer","file","multiple","onClick","picUrl","data-idx","tag","tIdx","data-idxs","Predictions","allUsers","setAllUsers","allUsersInfo","setAllUsersInfo","predictPicsTags","setPredictPicsTags","predictedInterest","setPredictedInterest","userIds","predictPicsInit","predictedInterestInit","userId","userArr","parse","predictPicsTagsClone","userid","tagIdx","tagidx","handleIntensityChange","handleSubmitPredict","predictedInterestClone","userPTags","tags","queryString","tagInfo","forEach","entry","index","UsersService","interest","userInfo","userPTagInfo","data-userid","data-tagidx","App","exact","to","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1acb6adf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const BASE_URL = '/main/api'\n\nexport function getPicSet() {\n    return fetch(`${BASE_URL}/get-pics`, {method: 'GET'})\n    .then(res => res.json())\n    .then(({ picsData }) => picsData)\n}\n","import React, { useEffect, useState } from 'react';\nimport ImageGallery from 'react-image-gallery';\nimport * as PicService from '../../services/PicService';\nimport * as AnalyticsService from '../../services/AnalyticsService'\nimport './pics.css';\nimport \"react-image-gallery/styles/css/image-gallery.css\"\nimport $ from 'jquery';\n\nexport default function Pics() {\n    const [pics, setPics] = useState([])\n    const [analyticsIntToggle, setAnalyticsIntToggle] = useState(false)\n    \n    useEffect(() => {\n        PicService.getPicSet()\n        .then(res => {console.log(res); return res})\n        .then(pics => setPics(pics))\n    }, [])\n\n    useEffect(() => {\n        AnalyticsService.promptAnalysis()\n        let analyticsInterval = setInterval(() => {\n            setAnalyticsIntToggle(!analyticsIntToggle)\n        }, 3000)\n        return () => {\n            clearInterval(analyticsInterval)\n        }\n    }, [analyticsIntToggle])\n    \n    const setPicClass = (e) => {\n        let picsInScroll = e.target.childNodes\n        let windowWidth = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)\n        for (let pic of picsInScroll) {\n            let fromLeft = pic.getBoundingClientRect().left\n            let picWidth = pic.getBoundingClientRect().width\n            if (fromLeft > 0 && fromLeft + picWidth < windowWidth + 50) { pic.className = \"scroll-pic active\" }\n            else if (fromLeft < -100 | fromLeft + picWidth > windowWidth + 200) { pic.className = \"scroll-pic inactive\" }\n        }\n    }\n    return (\n        <>\n        <div className=\"wrapper\">\n            <div className=\"scrolls\" onScroll={setPicClass}>\n                {pics[0] ? \n                <>\n                { pics.map((picData) => (<img src={picData[1]} id={picData[0]} className=\"scroll-pic inactive\" alt=\"pic\" />)) }\n                </>\n                :\n                <h3>Loading...</h3>\n                }\n            </div>\n        </div>\n        {/* <ImageGallery \n        ref={i => this._imageGallery = i}\n        slideInterval=\"2500\"\n        showBullets=\"true\" \n        additionalClass=\"gallery-wrap\"\n        onMouseOver={() => this._imageGallery.pause()} \n        onMouseLeave={() => this._imageGallery.play()}\n        items={pics.length > 0 ? pics.map((picData) => { let imgObj = {\n            original: picData[1], \n            thumbnail: picData[1], \n            originalClass: 'gallery-pic', \n            thumbnailClass: 'thumb-pic', \n            bulletClass: 'bullet' }; \n            return imgObj }):[]} \n            /> */}\n        </>\n    );\n}","const BASE_URL = '/main/api'\n\nexport function promptAnalysis() {\n    return fetch(`${BASE_URL}/get-analysis`, {method: 'GET'})\n    .then(res => res.json())\n    .then(dat => console.log(dat))\n}","import React, { useState, useEffect } from 'react';\nimport './socials.css'\n\nexport default function Socials() {\n    return (\n        <h3 id=\"socialsTag\">socials component</h3>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport './intro.css'\n\nexport default function Intro(){\n    return (\n        <h3 id=\"introTag\">intro component</h3>\n    );\n}","import React, { useState, useEffect } from 'react'\nimport './about.css';\n\nexport default function About(){\n    return (\n        <>\n        <h3 id=\"aboutTag\">about component</h3>\n        </>\n    );\n}","import $ from 'jquery';\nimport axios from 'axios';\nimport cookie from 'react-cookies';\n\nconst BASE_URL = '/main/api'\n\nexport function addPicsDBandFB(picsData) {\n    return axios.post(`${BASE_URL}/add-pics/`, picsData)\n    .then(res => console.log(res.data))\n}\n\nexport function removePicDBandFB(picName) {\n    return axios.post(`${BASE_URL}/remove-pic/`, {'picName': picName})\n    .then(res => res.data)\n}","import React, { useState, useEffect } from 'react';\nimport * as AddPicsService from '../../services/AddPics';\nimport * as PicService from '../../services/PicService'\nimport './AdminPics.css';\nimport $ from 'jquery';\n\nexport default function AdminPics() {\n    const [addPics, setAddPics] = useState([])\n    const [addPicsNames, setAddPicsNames] = useState([])\n    const [addPicsUrls, setAddPicsUrls] = useState([])\n    const [picsForm, setPicsForm] = useState()\n    const [picsDBInfo, setPicsDBInfo] = useState({ descriptions: {}, tagslists: {} })\n    const [oldPics, setOldPics] = useState([])\n\n    useEffect(() => {\n        PicService.getPicSet()\n        .then(pics => setOldPics(pics))\n    }, [])\n\n    useEffect(async() => {\n        let arrayAddPics = [...addPics]\n        let addPicsNames = arrayAddPics.map(pic => pic.name)\n        let picsDBInfoClone = { ...picsDBInfo }\n        let descriptionsPicNames = Object.keys(picsDBInfoClone.descriptions)\n        if (descriptionsPicNames.length > 0) {\n            for (let picName of descriptionsPicNames) {\n                if (addPicsNames.indexOf(picName) < 0) {\n                    delete picsDBInfoClone.descriptions[picName]\n                    delete picsDBInfoClone.tagslists[picName]\n                }\n            }\n        }\n        setPicsDBInfo(picsDBInfoClone)\n        setAddPicsNames(addPicsNames)\n        let picsData = new FormData()\n        for (var i = 0; i < addPics.length; i++) picsData.append('file', addPics[i])\n        setPicsForm(picsData)\n        let pics = await picsData.getAll('file')\n        let picUrls = pics.map(pic => URL.createObjectURL(pic))\n        setAddPicsUrls(picUrls)\n    }, [addPics])\n\n    useEffect(() => {\n        let { tagslists } = {...picsDBInfo}\n        for (let picName of addPicsNames) {\n            if (!tagslists[picName]) tagslists[picName] = [['', '']];\n        }\n    })\n\n    const handlePicsInputChange = (e) => {\n        const newDataTransfer = new DataTransfer();\n        for (let file of e.target.files) newDataTransfer.items.add(file);\n        setAddPics(newDataTransfer.files)\n    }\n\n    const handleSubmit = async (e) => {\n        let picsDBInfoClone = {...picsDBInfo}\n        let jsonDB = JSON.stringify(picsDBInfoClone)\n        let blob = new Blob([jsonDB], { type: 'application/json' })\n        picsForm.append('dbInfo', blob)\n        AddPicsService.addPicsDBandFB(picsForm)\n    }\n\n    const handleRemovePic = (e) => {\n        let idx = e.target.dataset.idx;\n        let addPicsCopy = [...addPics]\n        addPicsCopy.splice(idx, 1)\n        let newFileList = new DataTransfer()\n        for (let pic of addPicsCopy) newFileList.items.add(pic)\n        setAddPics(newFileList.files)\n    }\n    const handleDescriptionChange = (e) => {\n        let { descriptions } = { ...picsDBInfo }\n        descriptions[addPicsNames[e.target.dataset.idx]] = e.target.value\n        setPicsDBInfo({ ...picsDBInfo, descriptions })\n    }\n    // const handleTagsChange = (e) => {\n    //     let { tagslists } = { ...picsDBInfo }\n    //     tagslists[addPicsNames[e.target.dataset.idx]] = e.target.value\n    //     setPicsDBInfo({ ...picsDBInfo, tagslists })\n    // }\n\n    const handleRemovePicClick = (e) => {\n        let picName = e.target.id\n        AddPicsService.removePicDBandFB(picName)\n        .then(res => console.log(res))\n    }\n\n    const handleTagChange = (e) => {\n        let { tagslists } = {...picsDBInfo}\n        let idxsArr = e.target.dataset.idxs.split(',')\n        let idxsArrInt = idxsArr.map(idx => parseInt(idx))\n        let picName = addPicsNames[idxsArrInt[0]]\n        let tagIndex = idxsArrInt[1]\n        tagslists[picName][tagIndex][0] = e.target.value\n        setPicsDBInfo({ ...picsDBInfo, tagslists })\n    }\n\n    const handleTagIntensityChange = (e) => {\n        let { tagslists } = {...picsDBInfo}\n        let idxsArr = e.target.dataset.idxs.split(',')\n        let idxsArrInt = idxsArr.map(idx => parseInt(idx))\n        let picName = addPicsNames[idxsArrInt[0]]\n        let tagIndex = idxsArrInt[1]\n        tagslists[picName][tagIndex][1] = e.target.value\n        setPicsDBInfo({ ...picsDBInfo, tagslists })\n    }\n\n    const handleRemoveTagClick = (e) => {\n        let { tagslists } = {...picsDBInfo}\n        let idxsArr = e.target.dataset.idxs.split(',')\n        let idxsArrInt = idxsArr.map(idx => parseInt(idx))\n        let picName = addPicsNames[idxsArrInt[0]]\n        let tagIndex = idxsArrInt[1]\n        tagslists[picName].splice(tagIndex, 1)\n        setPicsDBInfo({...picsDBInfo, tagslists})\n    }\n\n    const handleAddTagClick = (e) => {\n        let { tagslists } = {...picsDBInfo}\n        let picName = addPicsNames[e.target.dataset.idx]\n        tagslists[picName].push(['', ''])\n        setPicsDBInfo({...picsDBInfo, tagslists})\n    }\n\n    return (\n        <>\n        <h3>hi</h3>\n        <input id=\"picsInp\" type=\"file\" name=\"picsInput\" files={addPics} onChange={handlePicsInputChange} multiple />\n        <button onClick={handleSubmit} type=\"submit\">ADD</button>\n        {addPicsUrls.map((picUrl, idx) => (\n            <>\n            <button data-idx={idx} onClick={handleRemovePic}>Remove</button>\n            <img src={picUrl} alt=\"\" />\n            <label>Description</label>\n            <input data-idx={idx} type=\"text\" name=\"description\" value={picsDBInfo.descriptions[addPicsNames[idx]]} onChange={handleDescriptionChange} />\n            <label>Tags</label>\n            {picsDBInfo['tagslists'][addPicsNames[idx]].map((tag, tIdx) => (\n                <>\n                <input type=\"text\" data-idxs={[idx, tIdx]} value={picsDBInfo['tagslists'][addPicsNames[idx]][tIdx][0]} onChange={handleTagChange} />\n                <input type=\"number\" data-idxs={[idx, tIdx]} value={picsDBInfo['tagslists'][addPicsNames[idx]][tIdx][1]} onChange={handleTagIntensityChange} />\n                <button data-idxs={[idx, tIdx]} onClick={handleRemoveTagClick} >-</button>\n                </>\n            ))}\n            <button data-idx={idx} onClick={handleAddTagClick} >+</button>\n            </>\n        ))}\n        {oldPics.map(picData => (\n            <>\n            <img src={picData[1]} id={picData[0]} alt=\"old-pic\" />\n            <button id={picData[0]} className=\"remove-pic-btn\" onClick={handleRemovePicClick}>X</button>\n            </>\n        ))}\n        </>\n    );\n}","const BASE_URL = '/main/api'\n\nexport function getAllUsers() {\n    return fetch(`${BASE_URL}/get-all-users`, {method: 'GET'})\n    .then(res => res.json())\n    .then(({ allUsers }) => allUsers)\n}\n\nexport function getAllUsersInfo() {\n    return fetch(`${BASE_URL}/get-user-info`, {method: 'GET'})\n    .then(res => res.json())\n    .then(({ allUsers }) => {\n    let allUsersMap = allUsers.map(userArr => {\n            if (userArr[1]) return [userArr[0], JSON.parse(userArr[1])]\n            else return userArr\n    })\n    return allUsersMap\n    })\n}\n\nexport function getUserInterestPrediction(userId, tags) {\n    let queryString = ''\n    for (let tagInfo of tags) {\n        queryString += 'dfg67dfg'\n        tagInfo.forEach((entry, index) => {\n            queryString += entry\n            if (index === 0) queryString += 'rt45rt'\n        })\n    }\n    return fetch(`${BASE_URL}/get-user-interest-prediction/${userId}/${queryString}`, {method: 'GET'})\n    .then(res => res.json())\n    .then(({ predictedInterest }) => predictedInterest)\n}","import React, { useState, useEffect } from 'react';\nimport * as UsersService from '../../services/UsersService'\n\nexport default function Predictions() {\n    const [allUsers, setAllUsers] = useState([])\n    const [allUsersInfo, setAllUsersInfo] = useState([])\n    const [predictPicsTags, setPredictPicsTags] = useState({  })\n    const [predictedInterest, setPredictedInterest] = useState({  })\n\n    useEffect(() => {\n        UsersService.getAllUsers()\n        .then(userIds => {\n            setAllUsers(userIds)\n            let predictPicsInit = {  }\n            let predictedInterestInit = {  }\n            userIds.map(userId => {\n                predictPicsInit[`user*${userId}`] = [['', '']]\n                predictedInterestInit[`user*${userId}`] = ''\n            })\n            setPredictPicsTags(predictPicsInit)\n            setPredictedInterest(predictedInterestInit)\n        })\n    }, [])\n\n    useEffect(() => {\n        UsersService.getAllUsersInfo()\n        .then(allUsersInfo => setAllUsersInfo(allUsersInfo))\n    }, [])\n\n    const handleTagChange = (e) => {\n        let predictPicsTagsClone = {...predictPicsTags}\n        let userId = e.target.dataset.userid\n        let tagIdx = e.target.dataset.tagidx\n        predictPicsTagsClone[`user*${userId}`][tagIdx][0] = e.target.value\n        setPredictPicsTags(predictPicsTagsClone)\n    }\n\n    const handleIntensityChange = (e) => {\n        let predictPicsTagsClone = {...predictPicsTags}\n        let userId = e.target.dataset.userid\n        let tagIdx = e.target.dataset.tagidx\n        predictPicsTagsClone[`user*${userId}`][tagIdx][1] = e.target.value\n        setPredictPicsTags(predictPicsTagsClone)\n    }\n\n    const handleRemoveTagClick = (e) => {\n        let predictPicsTagsClone = {...predictPicsTags}\n        let userId = e.target.dataset.userid\n        let tagIdx = e.target.dataset.tagidx\n        predictPicsTagsClone[`user*${userId}`].splice(tagIdx, 1)\n        setPredictPicsTags(predictPicsTagsClone)\n    } \n\n    const handleAddTagClick = (e) => {\n        let predictPicsTagsClone = {...predictPicsTags}\n        let userId = e.target.dataset.userid\n        predictPicsTagsClone[`user*${userId}`].push(['', ''])\n        setPredictPicsTags(predictPicsTagsClone)\n    }\n\n    const handleSubmitPredict = (e) => {\n        let predictedInterestClone = {...predictedInterest}\n        let userId = e.target.dataset.userid\n        let userPTags = predictPicsTags[`user*${userId}`]\n        UsersService.getUserInterestPrediction(userId, userPTags)\n        .then(interest => {\n            predictedInterestClone[`user*${userId}`] = interest\n            setPredictedInterest(predictedInterestClone)\n        })\n    }\n\n    return (\n        <>\n        <h3>All Users</h3>\n        {allUsers.map(userId => (<h3>{userId}</h3>))}\n        <h3>All Users Info</h3>\n        {allUsersInfo.map(userInfo => (\n            <>\n            <h3>User ID: {userInfo[0]}</h3>\n            {userInfo[1] ?\n            <>\n            {Object.keys(userInfo[1]).map(picName => (\n                <h3>{picName}: {userInfo[1][picName]}</h3>\n            ))}\n            <label>Predict Pic Tags</label>\n            {predictPicsTags[`user*${userInfo[0]}`].map((userPTagInfo, tIdx) => (\n                <>\n                <input type=\"text\" data-userid={userInfo[0]} data-tagidx={tIdx} value={predictPicsTags[`user*${userInfo[0]}`][tIdx][0]} onChange={handleTagChange} />\n                <input type=\"number\" data-userid={userInfo[0]} data-tagidx={tIdx} value={predictPicsTags[`user*${userInfo[0]}`][tIdx][1]} onChange={handleIntensityChange} />\n                <button data-userid={userInfo[0]} data-tagidx={tIdx} onClick={handleRemoveTagClick} >-</button>\n                </>\n            ))}\n            <button data-userid={userInfo[0]} onClick={handleAddTagClick} >+</button>\n            <button data-userid={userInfo[0]} onClick={handleSubmitPredict} >Submit</button>\n            <h3>prediction</h3>\n            <h3>{predictedInterest[`user*${userInfo[0]}`]}</h3>\n            </>\n            :\n            <>\n            <h3>No interest data yet</h3>\n            </>}\n            </>\n        ))}\n        </>\n    )\n}","import { Route, Link, NavLink } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport Pics from './components/pics/pics';\nimport Socials from './components/socials/socials'\nimport Intro from './components/intro/intro';\nimport About from './components/about/about';\nimport AdminPics from './pages/AdminPics/AdminPics';\nimport Predictions from './pages/Predictions/Predictions';\n\n\n\nfunction App() {\n  return (\n    <>\n      <NavLink className=\"nav-items\" exact to=\"/main\">Home</NavLink>\n      <NavLink className=\"nav-items\" exact to=\"/main/edit-pics\">Edit Pics</NavLink>\n      <NavLink className=\"nav-items\" exact to=\"/main/predictions\">Predictions</NavLink>\n      <Route exact path='/main'\n        render={() =>\n          <div id=\"appDiv\">\n            <h3>Hi</h3>\n            <Intro />\n            <Pics />\n            <Socials />\n            <About />\n          </div>\n         } />\n      <Route exact path='/main/edit-pics'\n        render={() => \n          <AdminPics />\n        } \n      />\n      <Route exact path='/main/predictions'\n        render={() => \n          <Predictions />\n        } \n      />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Router>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}